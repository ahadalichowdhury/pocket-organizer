name: Refresh FCM Access Token

# This workflow automatically refreshes the FCM access token every hour
# and updates it in MongoDB Atlas

on:
  schedule:
    # Runs every hour at minute 0
    - cron: "0 * * * *"

  # Allow manual trigger for testing
  workflow_dispatch:

jobs:
  refresh-token:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Generate FCM Access Token
        id: get-token
        run: |
          # Generate OAuth 2.0 access token
          TOKEN=$(gcloud auth print-access-token)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
          echo "‚úÖ Token generated: ${TOKEN:0:20}..."

      - name: Update MongoDB Atlas Secret
        env:
          MONGODB_PUBLIC_KEY: ${{ secrets.MONGODB_PUBLIC_KEY }}
          MONGODB_PRIVATE_KEY: ${{ secrets.MONGODB_PRIVATE_KEY }}
          MONGODB_GROUP_ID: ${{ secrets.MONGODB_GROUP_ID }}
          MONGODB_APP_ID: ${{ secrets.MONGODB_APP_ID }}
          FCM_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          echo "üì§ Updating fcm_access_token in MongoDB Atlas..."

          # Step 1: Login to get JWT token
          echo "üîë Authenticating with MongoDB Realm Admin API..."

          LOGIN_RESPONSE=$(curl -s --location --request POST \
            'https://realm.mongodb.com/api/admin/v3.0/auth/providers/mongodb-cloud/login' \
            --header 'Content-Type: application/json' \
            --data-raw "{
              \"username\": \"$MONGODB_PUBLIC_KEY\",
              \"apiKey\": \"$MONGODB_PRIVATE_KEY\"
            }")

          echo "Login response: $LOGIN_RESPONSE"

          # Extract access token from response
          ACCESS_TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå Failed to get access token!"
            echo "Response: $LOGIN_RESPONSE"
            exit 1
          fi

          echo "‚úÖ Authentication successful!"
          echo "Token: ${ACCESS_TOKEN:0:20}..."

          # Step 2: Get existing values to find fcm_access_token ID
          echo ""
          echo "üìã Getting existing values..."

          API_URL="https://realm.mongodb.com/api/admin/v3.0/groups/$MONGODB_GROUP_ID/apps/$MONGODB_APP_ID/values"

          GET_RESPONSE=$(curl -s \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Content-Type: application/json" \
            "$API_URL")

          echo "Values response: ${GET_RESPONSE:0:200}..."

          # Extract the _id of fcm_access_token value (if it exists)
          VALUE_ID=$(echo "$GET_RESPONSE" | grep -o '"_id":"[^"]*"[^}]*"name":"fcm_access_token"' | grep -o '"_id":"[^"]*"' | cut -d'"' -f4)

          # Step 3: Update or create the value
          if [ -n "$VALUE_ID" ]; then
            echo ""
            echo "üîÑ Found existing value with ID: $VALUE_ID"
            echo "Updating..."
            
            # Update existing value
            UPDATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
              --header "Authorization: Bearer $ACCESS_TOKEN" \
              --header "Content-Type: application/json" \
              "$API_URL/$VALUE_ID" \
              --data-raw "{
                \"name\": \"fcm_access_token\",
                \"value\": \"$FCM_TOKEN\",
                \"secret\": true
              }")
            
          else
            echo ""
            echo "‚ûï Value doesn't exist, creating new one..."
            
            # Create new value
            UPDATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              --header "Authorization: Bearer $ACCESS_TOKEN" \
              --header "Content-Type: application/json" \
              "$API_URL" \
              --data-raw "{
                \"name\": \"fcm_access_token\",
                \"value\": \"$FCM_TOKEN\",
                \"secret\": true
              }")
          fi

          HTTP_CODE=$(echo "$UPDATE_RESPONSE" | tail -n1)
          BODY=$(echo "$UPDATE_RESPONSE" | head -n-1)

          echo ""
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $BODY"

          # HTTP 200 = Success with body, HTTP 201 = Created, HTTP 204 = Success (No Content)
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ] || [ "$HTTP_CODE" -eq 204 ]; then
            echo "‚úÖ Token updated successfully in MongoDB Atlas!"
          else
            echo "‚ùå Failed to update token. HTTP Code: $HTTP_CODE"
            exit 1
          fi

      - name: Verify Token Update
        env:
          MONGODB_PUBLIC_KEY: ${{ secrets.MONGODB_PUBLIC_KEY }}
          MONGODB_PRIVATE_KEY: ${{ secrets.MONGODB_PRIVATE_KEY }}
          MONGODB_GROUP_ID: ${{ secrets.MONGODB_GROUP_ID }}
          MONGODB_APP_ID: ${{ secrets.MONGODB_APP_ID }}
        run: |
          echo "üîç Verifying token was updated..."

          RESPONSE=$(curl -s \
            -H "Content-Type: application/json" \
            -u "$MONGODB_PUBLIC_KEY:$MONGODB_PRIVATE_KEY" \
            "https://realm.mongodb.com/api/admin/v3.0/groups/$MONGODB_GROUP_ID/apps/$MONGODB_APP_ID/secrets")

          if echo "$RESPONSE" | grep -q "fcm_access_token"; then
            echo "‚úÖ Token verified in MongoDB Atlas"
          else
            echo "‚ö†Ô∏è Could not verify token"
          fi

      - name: Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ FCM Token refresh completed successfully!"
            echo "Next refresh in 1 hour"
          else
            echo "‚ùå FCM Token refresh failed!"
            echo "Check the logs above for details"
          fi
